treename: events
selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   #(jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) & (((sample_isQCD==0) & (fj_isQCD==0)) | ((sample_isQCD==1) & (fj_isQCD==1))) & (event_no%7!=0)
   #(recocluster_e>=5)
   (highestEnergyCluster_energy < 45)

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   #(jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<2500) & (((sample_isQCD==0) & (fj_isQCD==0)) | ((sample_isQCD==1) & (fj_isQCD==1))) & (event_no%7==0)
   #(recocluster_e<5)
   
new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   #recocells_mask: awkward.JaggedArray.ones_like(recocells_etarel)
   #sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
   #recocells_mask: awkward.JaggedArray.ones_like(recocells_e)
   recocells_mask: ak.ones_like(highestEnergyCluster_cells_energy) # diff event have diff number or inpu --> need zero padding, the mask keeps track of how many non zero point the event had
   highestEnergyCluster_cells_relative_theta: highestEnergyCluster_cells_theta - highestEnergyCluster_theta
   highestEnergyCluster_cells_relative_phi: highestEnergyCluster_cells_phi - highestEnergyCluster_phi
   relative_dr: highestEnergyCluster_cells_relative_phi*highestEnergyCluster_cells_relative_phi + highestEnergyCluster_cells_relative_theta * highestEnergyCluster_cells_relative_theta
   
preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: auto
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.1

inputs:
   pf_points: # its what will be used for kNN 'distance'
      pad_mode: wrap
      length: 700
      vars: 
         #- highestEnergyCluster_cells_relative_theta
         #- highestEnergyCluster_cells_relative_phi
         - relative_dr
         - highestEnergyCluster_cells_layer
           #- highestEnergyCluster_cells_layer
   pf_features:
      pad_mode: wrap
      length: 700
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - highestEnergyCluster_cells_energy
         - highestEnergyCluster_cells_relative_phi
         - highestEnergyCluster_cells_relative_theta
         - highestEnergyCluster_cells_layer

   pf_vectors: # can be used to do internal calculation without being input feature (e.g. derive the edges)
       length: 700
       pad_mode: wrap
       vars:
           - highestEnergyCluster_cells_energy

   pf_mask:
      length: 700
      pad_mode: constant
      vars: 
         - [recocells_mask, null]

labels: #used to split between classes for the training
   ### type can be `simple`, `custom`
  ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      highestEnergyCluster_isPhoton, highestEnergyCluster_isPi0
      ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
   - genParticle_phi
   - genParticle_theta
   - genParticle_energy
   - genParticle_pid
   - highestEnergyCluster_energy

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
       highestEnergyCluster_phi: [-10., 10.]
       highestEnergyCluster_theta: [-10., 10.]
   reweight_classes: [
      highestEnergyCluster_isPhoton,
      highestEnergyCluster_isPi0
      ]
   class_weights: [
      1, 1]
   reweight_hists:

